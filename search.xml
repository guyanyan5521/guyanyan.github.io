<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js对象中深拷贝浅拷贝问题]]></title>
    <url>%2F2018%2F04%2F09%2Fjs%E4%B8%AD%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[js对象浅拷贝浅拷贝就是obj对象经过拷贝后，虽然他们的属性相同，也的确是不同的对象，但他们的内部的obj都是指向同一个内存空间，如果原地址中的对象改变了，那么浅拷贝出来的对象也相应改变。反之亦然，浅拷贝出来的对象改变了数据，被拷贝的对象中的数据也会被改变。这种仅仅拷贝了基本类型的数据就是浅拷贝。代码如下12345678910111213141516171819 var o1 = &#123; name: 'lisi', age: 34, brother: &#123; name: 'lihua' &#125; &#125;; function cloneObj(obj) &#123; var newObj = &#123;&#125;; for(var p in obj)&#123; newObj[p] = obj[p]; &#125; return newObj; &#125;var o2 = cloneObj(o1);o2.brother.name = "haha";console.log("o1.brother.name:",o1.brother.name);console.log("o2.brother.name:",o2.brother.name);浅拷贝代码演示结果 js对象深拷贝深拷贝：深拷贝可以很好的解决引用类型的拷贝问题采用递归的方法去复制拷贝对象，从而解决浅拷贝带来的弊端1234567891011121314151617181920212223242526var o1 = &#123; name: 'lisi', age: 34, brother: &#123; name: 'lihua' &#125; &#125;; function cloneObj(obj) &#123; var newObj = &#123;&#125;; for(var p in obj)&#123; if(typeof obj[p] === 'object')&#123;//筛选出对象中的对象在进行拷贝 newObj[p] = arguments.callee(obj[p]); &#125;else&#123; newObj[p] = obj[p]; &#125; &#125; return newObj; &#125; var o2 = cloneObj(o1); o2.brother.name = 'wangwu'; console.log("o1.brother.name:",o1.brother.name); console.log("o2.brother.name:",o2.brother.name);深拷贝代码演示结果到此就总结完了，我只写了对象的深拷贝和浅拷贝，实际上还有数组的拷贝方法没有写，等在下一个文章里总结吧。如有补充或者发现什么不对的地方请点击关于我按钮按照我的邮箱地址写信给我吧！谢谢观看，觉得有帮助请点击屏幕收下我的小爱心吧！]]></content>
      <categories>
        <category>前端面试问题</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端面试问题之布局问题]]></title>
    <url>%2F2018%2F04%2F02%2F%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E4%B9%8B%E5%B8%83%E5%B1%80%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[今天复习前端题刚好看到这个题，感觉被问到的几率还挺大的，正好前几天刚把这个博客搭建好还不知道发点什么。今天就来总结一下吧！ 第一种问题：两列布局左边固定右边自适应方法1：利用浮动来实现：利用浮动脱离文档流这一特性实现代码如下：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; width: 300px; background: pink; height: 400px; float: left; &#125; #right&#123; background: blue; height: 400px; margin-left: 310px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法2：利用绝对定位来实现：原理同浮动一样都是利用脱离文档流的特性代码如下：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; width: 300px; background: pink; height: blue; position: absolute;/* fixed */ &#125; #right&#123; background: #00ff00; height: 400px; margin-left: 310px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法3:利用弹性布局 flex容器代码如下：123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; width: 300px; background: pink; height: 400px; &#125; #right&#123; background: blue; height: 400px; flex-grow: 1;//充满剩余空间 margin-left: 10px; -webkit-flex-grow: 1;//支持Safari &#125; #main&#123; display: flex; display: -webkit-flex;//支持Safari &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="main"&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法4：利用简单的margin属性实现代码如下：123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; width: 300px; background: pink; height: 400px; &#125; #right&#123; background: blue; height: 400px; margin-left: 310px; margin-top: -400px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt; &lt;h1&gt;hhhh&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 方法5：利用display的table 和 table-cell 属性实现（原理是table特性 子元素在父元素里均分空间）代码如下：123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; width: 300px; background: pink; height: 400px; display: table-cell; &#125; #right&#123; background: blue; height: 400px; display: table-cell; &#125; #main&#123; display: table; width: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="main"&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 第二种问题：三列布局左右固定中间自适应方法1：利用浮动来实现：利用浮动脱离文档流这一特性实现代码如下：12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left, #right&#123; width: 300px; height: 400px; background: pink; &#125; #left&#123; float: left; &#125; #right&#123; float: right; &#125; #center&#123; height: 400px; background: blue; margin: 0 310px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt; &lt;div id="center"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法2：利用绝对定位来实现：原理同浮动一样都是利用脱离文档流的特性注意:这里一定要先渲染左右绝对定位，如果左边绝对定位后先渲染center后绝对定位right会导致right绝对定位上不去掉下来。这是由于div块级元素占整行导致的代码如下：123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left&#123; left: 0; top: 0; &#125; #right&#123; right: 0; top: 0; &#125; #left, #right&#123; width: 300px; height: 400px; background: pink; position: absolute; &#125; #center&#123; height: 400px; background: blue; margin: 0 310px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="center"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法3:利用弹性布局 flex容器代码如下：123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #left, #right&#123; width: 300px; height: 400px; background: pink; &#125; #center&#123; height: 400px; background: blue; flex-grow: 1; -webkit-flex-grow: 1;//支持Safari &#125; #main&#123; display: flex; display: -webkit-flex;//支持Safari &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="main"&gt; &lt;div id="left"&gt;&lt;/div&gt; &lt;div id="center"&gt;&lt;/div&gt; &lt;div id="right"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 第三种问题：三列布局上下固定中间自适应方法1：利用固定定位实现注意：固定定位有兼容性问题在ie6以及早期ie都用不了代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; #top, #bottom&#123; height: 100px; background: blue; position: fixed; width: 100%; &#125; #top&#123; top: 0; &#125; #bottom&#123; bottom: 0; &#125; #center&#123; background: #cccccc; position: absolute; top: 100px; bottom: 100px; /*width: 100%;*/ left: 0; right: 0; overflow: scroll;//产生滚动机制不论元素是否溢出内容区 &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="top"&gt;top&lt;/div&gt; &lt;div id="center"&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; &lt;/div&gt; &lt;div id="bottom"&gt;bottom&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 方法2：利用弹性布局 flex容器代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; &#125; body, html, #main&#123; height: 100%; &#125; #top, #bottom&#123; height: 100px; background: #ff0000; &#125; #center&#123; background: #cccccc; flex-grow: 1; overflow: scroll; -webkit-flex-grow: 1;//支持Safari &#125; #main&#123; display: -webkit-flex;//支持Safari display: flex; flex-direction: column;//主轴为垂直方向，起点在上沿 -ms-flex-direction: column;//兼容IE10 -webkit-box-direction: column;//旧版Chrome -moz-box-direction: column;//旧版FireFox &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="main"&gt; &lt;div id="top"&gt;top&lt;/div&gt; &lt;div id="center"&gt; center center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; center&lt;br&gt; &lt;/div&gt; &lt;div id="bottom"&gt;bottom&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;到此就总结完了，如有补充或者发现什么不对的地方请点击关于我按钮按照我的邮箱地址写信给我吧！谢谢观看，觉得有帮助请点击屏幕收下我的小爱心吧！]]></content>
      <categories>
        <category>前端面试问题</category>
      </categories>
      <tags>
        <tag>前端面试</tag>
        <tag>布局</tag>
      </tags>
  </entry>
</search>
